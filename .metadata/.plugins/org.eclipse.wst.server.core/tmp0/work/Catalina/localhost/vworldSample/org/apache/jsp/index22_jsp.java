/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.79
 * Generated at: 2022-06-12 13:00:27 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class index22_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/WEB-INF/lib/taglibs-standard-impl-1.2.5.jar", Long.valueOf(1655013821056L));
    _jspx_dependants.put("jar:file:/D:/dev/workspace/jhchoiProject/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/vworldSample/WEB-INF/lib/taglibs-standard-impl-1.2.5.jar!/META-INF/c.tld", Long.valueOf(1425946270000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<!-- 지오코더2.0, 역지오코더 2.0 데이터 API 2.0 샘플 -->\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("<script  src=\"http://code.jquery.com/jquery-latest.min.js\"></script>\r\n");
      out.write("<script src=\"https://cdnjs.cloudflare.com/ajax/libs/proj4js/2.4.4/proj4.js\"></script>\r\n");
      out.write("<script src=\"https://cdn.rawgit.com/openlayers/openlayers.github.io/master/en/v5.3.0/build/ol.js\"></script>\r\n");
      out.write("<script src=\"https://code.jquery.com/jquery-2.2.3.min.js\"></script>\r\n");
      out.write("<script type=\"text/javascript\" src=\"test.js\" defer ></script>\r\n");
      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("<div id=\"map\" style=\"width: 1000px; height: 800px; left: 0px; top: 0px\"></div>\r\n");
      out.write("<div>\r\n");
      out.write("	<form id=\"searchForm\" action=\"#\" class=\"form_data\" onsubmit=\"return false;search();\">\r\n");
      out.write("<!-- nsdi apikey 시작 -->	\r\n");
      out.write("		<input type=\"hidden\" id=\"sido_key\" value=\"12685d425f1af0872d756c\" />\r\n");
      out.write("		<input type=\"hidden\" id=\"sigoon_key\" value=\"b0888bae39fbd0463a9252\" /> \r\n");
      out.write("		<input type=\"hidden\" id=\"dong_key\" value=\"91afccaa8d7f499151ee3b\" /> <!--  아직 key 인증을 받지 못함... -->\r\n");
      out.write("<!-- nsdi apikey 종료 -->		\r\n");
      out.write("		<input type=\"hidden\" name=\"apiKey\" value=\"CEB52025-E065-364C-9DBA-44880E3B02B8\" />\r\n");
      out.write("		\r\n");
      out.write("		<div>\r\n");
      out.write("			<select id=\"sido_code\">\r\n");
      out.write("				<option>선택</option>\r\n");
      out.write("			</select>\r\n");
      out.write("			<select id=\"sigoon_code\">\r\n");
      out.write("				<option>선택</option>\r\n");
      out.write("			</select>\r\n");
      out.write("			<select id=\"dong_code\">\r\n");
      out.write("				<option>선택</option>\r\n");
      out.write("			</select>\r\n");
      out.write("			<input type=\"button\" value=\"정류소 검색\" onclick=\"bus_where(map.getView().getCenter()[0],map.getView().getCenter()[1])\">\r\n");
      out.write("			<input type=\"button\" value=\"위치\" id=\"geolocate\" onclick=\"whereisit()\">\r\n");
      out.write("			<input type=\"button\" value=\"지도에 버스정류장 위치에 표시\" onclick=\"busLocation()\">\r\n");
      out.write("			\r\n");
      out.write("			<p><span>역지오코더 위치 : </span><span id=\"geoAddress\"></span> </p>\r\n");
      out.write("		</div>\r\n");
      out.write("		\r\n");
      out.write("	<ul id=\"result_ajax\">\r\n");
      out.write("		<li></li>\r\n");
      out.write("	</ul>\r\n");
      out.write("	<p id=\"result_count\"></p>\r\n");
      out.write("	<p id=\"result_pos\"></p>\r\n");
      out.write("	<p id=\"loading\"></p>\r\n");
      out.write("	<p id=\"result_bus\"></p>\r\n");
      out.write("	</form>\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	<form id=\"dataForm\">\r\n");
      out.write("		<input type=\"hidden\" name=\"key\" value=\"CEB52025-E065-364C-9DBA-44880E3B02B8\">\r\n");
      out.write("		<input type=\"hidden\" name=\"domain\" value=\"http://localhost:8080\">\r\n");
      out.write("		<input type=\"hidden\" name=\"service\" value=\"data\">\r\n");
      out.write("		<input type=\"hidden\" name=\"version\" value=\"2.0\">\r\n");
      out.write("		<input type=\"hidden\" name=\"request\" value=\"getfeature\">\r\n");
      out.write("		<input type=\"hidden\" name=\"format\" value=\"json\">\r\n");
      out.write("		<input type=\"hidden\" name=\"size\" value=\"10\">\r\n");
      out.write("		<input type=\"hidden\" name=\"page\" value=\"1\">\r\n");
      out.write("		<!-- <input type=\"hidden\" name=\"data\" value=\"LT_C_ADSIDO_INFO\"> -->\r\n");
      out.write("		<input type=\"hidden\" name=\"data\" value=\"LT_C_ADEMD_INFO\">\r\n");
      out.write("		<input type=\"hidden\" name=\"geometry\" value=\"true\">\r\n");
      out.write("		<input type=\"hidden\" name=\"attribute\" value=\"true\">\r\n");
      out.write("		<input type=\"hidden\" name=\"crs\" value=\"EPSG:4326\">\r\n");
      out.write("	</form>\r\n");
      out.write("	\r\n");
      out.write("</div>\r\n");
      out.write("	\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
